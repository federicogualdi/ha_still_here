[tool.poetry]
description = "HA Still Here Backend"
authors = ["Federico Gualdi"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.13"
loguru = "^0.7.3"
packaging = "^24.2"
prettytable = "^3.14.0"
pydantic = "^2"
pydantic-settings = "^2"
uvicorn = "^0.34.0"
fastapi = "^0.115.8"
httpx = "^0.28.1"


[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pre-commit = "^4.1.0"
coverage = { version="^7.6.0", extras=["toml"] }
pytest = ">=8.3,<9"
pytest-mock = "^3.14.0"
pytest-asyncio = "^0.25"
radon = "^6.0.1"


[tool.poetry.group.debug]
optional = true

[tool.poetry.group.debug.dependencies]
debugpy = "^1.8.0"

[tool.ruff]
target-version = "py313"
fix = true
show-fixes = true
# max line length
line-length = 120

[tool.ruff.lint]
select = [
    "A",        # flake8-builtins
    "ANN",      # flake8-annotations
    "ARG",      # flake8-unused-arguments
    "ASYNC",    # flake8-async
    "BLE",      # flake8-blind-except
    "C4",       # flake8-comprehensions
    "C90",      # mccabe
    "COM",      # flake8-commas
    "D",        # docstrings
    "E",        # pycodestyle (Error)
    "ERA",      # eradicate
    "F",        # pyflakes/autoflake
    "FLY",      # flynt
    "G",        # flake8-logging-format
    "N",        # pep8-naming
    "I",        # isort
    "PL",       # Pylint
    "PIE",      # flake8-pie
    "PT",       # flake8-pytest-style
    "PYI",      # flake8-pyi
    "Q",        # flake8-quotes
    "RET",      # flake8-return
    "RSE",      # flake8-raise
    "RUF",      # Ruff-specific rules
    "SLF",      # flake8-self
    "SIM",      # flake8-simplify
    "T20",      # flake8-print
    "TD",       # flake8-todos"
    "TRY",      # tryceratops
    "S",        # flake8-bandit
    "UP",       # pyupgrade
    "W",        # pycodestyle (Warning)
    "YTT",      # flake8-2020
]
ignore = [
    "ANN002",   # Missing type annotation for *args
    "ANN003",   # Missing type annotation for **kwargs
    "ANN101",   # Missing type annotation for self in method1
    "ANN102",   # Missing type annotation for cls in classmethod1
    "G004",     # Logging statement uses f-string
    "TD002",    # Missing author in TODO; try: # TODO(<author_name>): ...
    "TD003",    # Missing issue link on the line following this TODO
    "TRY003",   # Avoid specifying long messages outside the exception class
    "D407",     # Missing dashed underline after section
    "D406",     # Section name should end with a newline
    "UP007",    # Use `X | Y` for type annotations
]
fixable = [
    "C4",       # flake8-comprehensions
    "COM",      # flake8-commas
    "I",        # isort
    "Q",        # flake8-quotes
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["ARG001", "ARG002", "PLR0913", "PLR2004", "S101", "SLF001", "C901"]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
# Use Google-style docstrings.
convention = "google"

[tool.ruff.lint.isort]
# Don't force all from imports to appear on their own line.
force-single-line = true
# Use a single line between direct and from import
lines-between-types = 1

[tool.ruff.lint.flake8-annotations]
suppress-none-returning = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# pytest configuration
[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
